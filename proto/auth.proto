syntax = "proto3";
package auth;

// Define the create user service that could be called in our GRPC and define input and output
service UsersService {
    rpc CreateUser (CreateUserDto) returns (User) {}
    rpc FindAllUsers (Empty) returns (Users) {}
    rpc FindOneUser (FindOneDto) returns (User) {}
    rpc UpdateUser (UpdateUserDto) returns (User) {}
    rpc RemoveUser (FindOneDto) returns (User) {}

    //Un stream es para cuando tenemos muchos datos y queremos como "paginarlos". Entonces generamos esta suerte de stream para dividir la data en "chunks"
    rpc QueryUsers (stream PaginationDto) returns (stream Users) {}
}

message PaginationDto {
    int32 page = 1;
    int32 skip = 2;

}

message Empty {}

message UpdateUserDto {
    string id = 1;
    SocialMedia socialMedia = 2;
}

message FindOneDto {
    string id = 1;
}

//With repeated we are specifying an array of users
message Users {
    repeated User users = 1;
}

message CreateUserDto {
    string username = 1;
    string password = 2;
    int32 age = 3;
}


// With message we define the types basically
message User {
    string id = 1;
    string username = 2;
    string password = 3;
    int32 age = 4;
    bool subscribed = 5;
    SocialMedia socialMedia = 6; 

}

message SocialMedia {
    optional string twitterUri = 1;
    optional string fbUri = 2;

}